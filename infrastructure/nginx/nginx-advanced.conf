# Advanced Nginx Configuration with JWT Verification and Security
# This configuration includes JWT verification, advanced rate limiting, and security headers

load_module modules/ngx_http_js_module.so;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging format with security information
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time" '
                    'jwt_valid=$jwt_valid user_id=$jwt_user_id user_role=$jwt_user_role';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    server_tokens off; # Hide Nginx version

    # SSL/TLS Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json application/xml;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=global:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=20r/s;
    limit_req_zone $jwt_user_id zone=user:10m rate=100r/s;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_conn_zone $server_name zone=conn_limit_per_server:10m;

    # JWT Configuration
    js_import jwt from /etc/nginx/jwt.js;
    js_set $jwt_valid jwt.verify;
    js_set $jwt_user_id jwt.getUserId;
    js_set $jwt_user_role jwt.getUserRole;

    # Upstream services
    upstream auth-service {
        server auth-service:3001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream orders-service {
        server orders-service:3002 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream supplier-service {
        server supplier-service:3003 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Security headers map
    map $sent_http_content_type $security_headers {
        ~*text/html "nosniff";
        default "";
    }

    # Main server block (HTTP - redirect to HTTPS)
    server {
        listen 80;
        server_name localhost gasconnect.local;
        
        # Redirect all HTTP traffic to HTTPS
        return 301 https://$server_name$request_uri;
    }

    # Main server block (HTTPS)
    server {
        listen 443 ssl http2;
        server_name localhost gasconnect.local;

        # SSL certificates
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        # Connection limits
        limit_conn conn_limit_per_ip 20;
        limit_conn conn_limit_per_server 1000;

        # Security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self' wss:; frame-ancestors 'none';" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

        # CORS headers for API endpoints
        location ~ ^/api/.* {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*" always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
                add_header Access-Control-Max-Age 1728000 always;
                add_header Content-Type "text/plain; charset=utf-8" always;
                add_header Content-Length 0 always;
                return 204;
            }
            
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
        }

        # Health check endpoint (no auth required)
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Authentication service routes (no JWT verification for auth endpoints)
        location /api/v1/auth/ {
            limit_req zone=auth burst=10 nodelay;
            
            proxy_pass http://auth-service/api/v1/;
            include /etc/nginx/proxy_params;
        }

        # Protected API routes (require JWT verification)
        location ~ ^/api/v1/(orders|users|profiles|addresses|suppliers|inventory|pricing|payments|analytics|bundles)/ {
            # JWT verification
            access_by_lua_block {
                local jwt = require "jwt"
                local auth_header = ngx.var.http_authorization
                
                if not auth_header then
                    ngx.status = 401
                    ngx.say('{"error": "Authorization header required"}')
                    ngx.exit(401)
                end
                
                local token = string.match(auth_header, "Bearer%s+(.+)")
                if not token then
                    ngx.status = 401
                    ngx.say('{"error": "Invalid authorization format"}')
                    ngx.exit(401)
                end
                
                local jwt_valid = jwt.verify(token)
                if not jwt_valid then
                    ngx.status = 401
                    ngx.say('{"error": "Invalid or expired token"}')
                    ngx.exit(401)
                end
            }
            
            limit_req zone=api burst=20 nodelay;
            limit_req zone=user burst=50 nodelay;
            
            # Route to appropriate service
            if ($uri ~ ^/api/v1/orders/) {
                proxy_pass http://orders-service;
            }
            if ($uri ~ ^/api/v1/(users|profiles|addresses)/) {
                proxy_pass http://auth-service;
            }
            if ($uri ~ ^/api/v1/(suppliers|inventory|pricing|payments|analytics|bundles)/) {
                proxy_pass http://supplier-service;
            }
            
            include /etc/nginx/proxy_params;
        }

        # WebSocket support for real-time updates
        location /ws/ {
            # JWT verification for WebSocket connections
            access_by_lua_block {
                local jwt = require "jwt"
                local token = ngx.var.arg_token or ngx.var.http_authorization
                
                if not token then
                    ngx.status = 401
                    ngx.exit(401)
                end
                
                if string.match(token, "Bearer%s+(.+)") then
                    token = string.match(token, "Bearer%s+(.+)")
                end
                
                local jwt_valid = jwt.verify(token)
                if not jwt_valid then
                    ngx.status = 401
                    ngx.exit(401)
                end
            }
            
            proxy_pass http://orders-service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;
        }

        # API documentation (public access)
        location /api/docs {
            limit_req zone=global burst=5 nodelay;
            
            # Route to auth service docs by default
            proxy_pass http://auth-service/api/docs;
            include /etc/nginx/proxy_params;
        }

        # Service-specific documentation
        location ~ ^/api/docs/(auth|orders|supplier)$ {
            limit_req zone=global burst=5 nodelay;
            
            if ($1 = "auth") {
                proxy_pass http://auth-service/api/docs;
            }
            if ($1 = "orders") {
                proxy_pass http://orders-service/api/docs;
            }
            if ($1 = "supplier") {
                proxy_pass http://supplier-service/api/docs;
            }
            
            include /etc/nginx/proxy_params;
        }

        # Default route - API information
        location / {
            limit_req zone=global burst=10 nodelay;
            
            return 200 '{"service":"GasConnect API Gateway","version":"1.0.0","status":"running","endpoints":["/api/v1/auth","/api/v1/orders","/api/v1/suppliers","/api/v1/inventory","/api/v1/pricing","/api/v1/payments"],"documentation":"/api/docs","health":"/health","websocket":"/ws"}';
            add_header Content-Type application/json;
        }

        # Block common attack patterns
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Custom error pages
        error_page 404 /404.json;
        error_page 500 502 503 504 /50x.json;

        location = /404.json {
            internal;
            return 404 '{"error":"Not Found","message":"The requested resource was not found","code":404}';
            add_header Content-Type application/json;
        }

        location = /50x.json {
            internal;
            return 500 '{"error":"Internal Server Error","message":"An internal server error occurred","code":500}';
            add_header Content-Type application/json;
        }
    }
}

# Include additional configuration files
include /etc/nginx/conf.d/*.conf;
