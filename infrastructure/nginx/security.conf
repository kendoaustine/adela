# Nginx Security Configuration
# Advanced security settings and attack prevention

# Hide Nginx version
server_tokens off;

# Prevent clickjacking
add_header X-Frame-Options DENY always;

# Prevent MIME type sniffing
add_header X-Content-Type-Options nosniff always;

# Enable XSS protection
add_header X-XSS-Protection "1; mode=block" always;

# Referrer policy
add_header Referrer-Policy "strict-origin-when-cross-origin" always;

# Content Security Policy
add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: ws:; media-src 'self'; object-src 'none'; child-src 'none'; frame-ancestors 'none'; form-action 'self'; base-uri 'self';" always;

# HTTP Strict Transport Security (HSTS)
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

# Permissions Policy (formerly Feature Policy)
add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=(), speaker=(), vibrate=(), fullscreen=(self), sync-xhr=()" always;

# Block common attack patterns
location ~ /\.(ht|git|svn) {
    deny all;
    access_log off;
    log_not_found off;
    return 404;
}

location ~ ~$ {
    deny all;
    access_log off;
    log_not_found off;
    return 404;
}

location ~ /\.well-known {
    allow all;
}

# Block access to sensitive files
location ~ \.(sql|log|conf|ini|sh|bak|old|tmp)$ {
    deny all;
    access_log off;
    log_not_found off;
    return 404;
}

# Block user agents
if ($http_user_agent ~* (nmap|nikto|wikto|sf|sqlmap|bsqlbf|w3af|acunetix|havij|appscan)) {
    return 444;
}

# Block suspicious request methods
if ($request_method !~ ^(GET|HEAD|POST|PUT|DELETE|OPTIONS|PATCH)$) {
    return 444;
}

# Block requests with suspicious query strings
if ($query_string ~ "(\<|%3C).*script.*(\>|%3E)") {
    return 444;
}

if ($query_string ~ "GLOBALS(=|\[|\%[0-9A-Z]{0,2})") {
    return 444;
}

if ($query_string ~ "_REQUEST(=|\[|\%[0-9A-Z]{0,2})") {
    return 444;
}

if ($query_string ~ "proc/self/environ") {
    return 444;
}

if ($query_string ~ "mosConfig_[a-zA-Z_]{1,21}(=|\%3D)") {
    return 444;
}

if ($query_string ~ "base64_(en|de)code\(.*\)") {
    return 444;
}

# Block requests with suspicious URIs
if ($request_uri ~ "(\<|%3C).*script.*(\>|%3E)") {
    return 444;
}

if ($request_uri ~ "/(wp-admin|wp-login|wp-config|wp-content|wp-includes)") {
    return 444;
}

if ($request_uri ~ "/(phpmyadmin|pma|admin|mysql|sql)") {
    return 444;
}

# Rate limiting for different endpoints
limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
limit_req_zone $binary_remote_addr zone=register:10m rate=3r/m;
limit_req_zone $binary_remote_addr zone=api:10m rate=20r/s;
limit_req_zone $binary_remote_addr zone=global:10m rate=10r/s;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
limit_conn_zone $server_name zone=conn_limit_per_server:10m;

# Apply connection limits
limit_conn conn_limit_per_ip 20;
limit_conn conn_limit_per_server 1000;

# Custom error pages for security
error_page 400 401 403 404 /error.json;
error_page 500 502 503 504 /error.json;

location = /error.json {
    internal;
    return 200 '{"error":"Request could not be processed","timestamp":"$time_iso8601","request_id":"$request_id"}';
    add_header Content-Type application/json;
}
